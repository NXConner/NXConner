"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const pg_parameters_1 = require("pg-parameters");
class ChangelogRepository {
    constructor(client) {
        if (client instanceof pg_parameters_1.Client) {
            this.client = client;
        }
        else {
            this.client = new pg_parameters_1.Client(client);
        }
        this.lockId = 0;
    }
    aquireLock() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureMigrationTables();
            return yield this.client.withTransaction(() => __awaiter(this, void 0, void 0, function* () {
                const { locks } = yield this.client.querySingle(`
        select
          count(*)::integer as locks
        from migration_lock
        where is_locked = true;
      `);
                if (locks === 0) {
                    const { id: lockId } = yield this.client.insert('migration_lock', {
                        is_locked: true,
                        migration_tool_version: '0.0.0',
                    }, 'id');
                    this.lockId = lockId;
                    return true;
                }
                return false;
            }));
        });
    }
    releaseLock() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureMigrationTables();
            yield this.client.execute(`
      update migration_lock
      set
        is_locked = false
      where id = :id;
    `, { id: this.lockId });
        });
    }
    validateChangeset(changeset) {
        return __awaiter(this, void 0, void 0, function* () {
            const dbChangest = yield this.getChangeset(changeset.file, changeset.name);
            const validation = {
                shouldExecute: false,
                messages: [],
            };
            if (dbChangest) {
                if (dbChangest.executionType !== changeset.executionType) {
                    validation.shouldExecute = false;
                    validation.messages
                        .push(`Script execution type has changed, execution type was ${dbChangest.executionType}, is now ${changeset.executionType}`);
                }
                else if (changeset.executionType === 'once') {
                    validation.shouldExecute = false;
                    if (dbChangest.hash !== changeset.hash) {
                        validation.messages
                            .push(`Script content has changed, content hash was ${dbChangest.hash}, is now ${changeset.hash}`);
                    }
                }
                else if (changeset.executionType === 'always') {
                    validation.shouldExecute = true;
                }
                else if (changeset.executionType === 'change') {
                    if (dbChangest.hash !== changeset.hash) {
                        validation.shouldExecute = true;
                    }
                }
            }
            else {
                validation.shouldExecute = true;
            }
            return validation;
        });
    }
    getChangeset(file, name) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureMigrationTables();
            return yield this.client.querySingle(`
      select
        cs.id,
        cs.file,
        cs.name,
        cs.execution_type "executionType",
        cs.context,
        cl.content_hash hash
      from migration_changesets cs
      left join migration_changelog cl on cs.id = cl.changeset_id
      where cs.file = :file
      and cs.name = :name
      order by cl.executed_at desc
      limit 1;
    `, { file, name });
        });
    }
    executeChangeset(changeset) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureMigrationTables();
            try {
                const response = yield this.client.execute(changeset.script);
                yield this.insertChangeset(changeset);
            }
            catch (err) {
                const message = `Error executing ${changeset.formatName()}\n` +
                    `${err.toString().split(/\n/g).map((e) => `  ${e}`).join('\n')}`;
                throw new Error(message);
            }
        });
    }
    insertChangeset(changeset) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureMigrationTables();
            const result = yield this.client.insert('migration_changesets', {
                file: changeset.file,
                name: changeset.name,
                execution_type: changeset.executionType,
                context: changeset.context,
            }, 'id');
            yield this.client.insert('migration_changelog', {
                lock_id: this.lockId,
                changeset_id: result.id,
                content_hash: changeset.hash,
            }, 'id');
        });
    }
    ensureMigrationTables() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.tablesPromise) {
                this.tablesPromise = (() => __awaiter(this, void 0, void 0, function* () {
                    yield this.createLockTable();
                    yield this.createChangesetTable();
                    yield this.createChangelogTable();
                }))();
            }
            yield this.tablesPromise;
        });
    }
    createLockTable() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.execute(`
      create table if not exists migration_lock (
        id serial primary key,
        is_locked boolean not null,
        migration_tool_version text not null,
        created_at timestamp not null default current_timestamp
      );
    `);
        });
    }
    createChangesetTable() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.execute(`
      create table if not exists migration_changesets (
        id serial primary key,
        file text not null,
        name text,
        execution_type text not null default 'once' check (execution_type in ('once', 'always', 'change')),
        context text,
        created_at timestamp not null default current_timestamp,
        unique (file, name)
      );
    `);
        });
    }
    createChangelogTable() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.execute(`
      create table if not exists migration_changelog (
        id serial primary key,
        lock_id integer not null references migration_lock,
        changeset_id integer not null references migration_changesets,
        content_hash text not null,
        executed_at timestamp not null default current_timestamp
      );
    `);
        });
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ChangelogRepository;
//# sourceMappingURL=changelog-repository.js.map