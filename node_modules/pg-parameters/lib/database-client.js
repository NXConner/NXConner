"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const query_builder_1 = require("./query-builder");
const pg = require('pg');
class DatabaseClient {
    constructor(postgresOptions) {
        this.pool = new pg.Pool(postgresOptions);
    }
    withTransaction(fn) {
        return __awaiter(this, void 0, void 0, function* () {
            let response;
            let success = false;
            yield this.ensureConnection();
            yield this.client.query('begin');
            try {
                response = yield fn();
                success = true;
            }
            finally {
                if (success) {
                    yield this.client.query('commit');
                }
                else {
                    yield this.client.query('rollback');
                }
            }
            return response;
        });
    }
    execute(query, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureConnection();
            const queryObj = query_builder_1.default.buildQuery(query, parameters);
            const result = yield this.client.query(queryObj.query, queryObj.arguments);
            return result;
        });
    }
    query(query, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.execute(query, parameters);
            return result.rows;
        });
    }
    querySingle(query, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.execute(query, parameters);
            if (result.rows.length > 1) {
                throw new Error(`Expected a single result, but found ${result.rows.length}`);
            }
            return result.rows[0];
        });
    }
    insert(tableName, fields, ...returning) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureConnection();
            const queryObj = query_builder_1.default.buildInsert(tableName, fields, returning);
            const result = yield this.client.query(queryObj.query, queryObj.arguments);
            return result.rows[0];
        });
    }
    ensureConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.client) {
                this.client = yield this.pool.connect();
            }
        });
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DatabaseClient;
//# sourceMappingURL=database-client.js.map